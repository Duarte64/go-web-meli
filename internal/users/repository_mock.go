package users

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MockRepository) GetAll() ([]User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MockRepository) GetById(id uint) (User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastId provides a mock function with given fields:
func (_m *MockRepository) LastId() (uint, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastId")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: id, lastname, age
func (_m *MockRepository) Patch(id uint, lastname string, age int) (User, error) {
	ret := _m.Called(id, lastname, age)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, int) (User, error)); ok {
		return rf(id, lastname, age)
	}
	if rf, ok := ret.Get(0).(func(uint, string, int) User); ok {
		r0 = rf(id, lastname, age)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(uint, string, int) error); ok {
		r1 = rf(id, lastname, age)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: id, name, lastname, email, createdAt, age, height, active
func (_m *MockRepository) Store(id uint, name string, lastname string, email string, createdAt string, age int, height float64, active bool) (User, error) {
	ret := _m.Called(id, name, lastname, email, createdAt, age, height, active)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string, string, string, int, float64, bool) (User, error)); ok {
		return rf(id, name, lastname, email, createdAt, age, height, active)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string, string, string, int, float64, bool) User); ok {
		r0 = rf(id, name, lastname, email, createdAt, age, height, active)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string, string, string, int, float64, bool) error); ok {
		r1 = rf(id, name, lastname, email, createdAt, age, height, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, name, lastname, email, age, height, active
func (_m *MockRepository) Update(id uint, name string, lastname string, email string, age int, height float64, active bool) (User, error) {
	ret := _m.Called(id, name, lastname, email, age, height, active)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string, string, int, float64, bool) (User, error)); ok {
		return rf(id, name, lastname, email, age, height, active)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string, string, int, float64, bool) User); ok {
		r0 = rf(id, name, lastname, email, age, height, active)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string, string, int, float64, bool) error); ok {
		r1 = rf(id, name, lastname, email, age, height, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
